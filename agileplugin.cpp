#include "agileplugin.h"
#include "qgisinterface.h"
#include "qgsmessagelog.h"
#include "qgsmapcanvas.h"
#include "qgsrasterlayer.h"
#include "qgsmaplayerregistry.h"
#include <QAction>
#include <QList>
//#include "Qgis_tools.h"
#include <QFileDialog>
#include <QFileInfo>
#include <qgsvectorlayer.h>
using namespace std;

// Static variables for plugin description
static const QString sName = QObject::tr("AgilePlugin");
static const QString sDescription = QObject::tr("This is a very agile plugin");
static const QString sCategory = QObject::tr("Agile projects");
static const QString sPluginVersion = QObject::tr("Version 1.0");
static const QgisPlugin::PLUGINTYPE sPluginType = QgisPlugin::UI;
static const QString sPluginIcon = "";

AgilePlugin::AgilePlugin(QgisInterface * interface)
    : QgisPlugin(sName, sDescription, sCategory, sPluginVersion, sPluginType)
    , m_GISInterface(interface)
    , m_action(nullptr)
{
}

void AgilePlugin::initGui()
{
   std::cout << "AgilePlugin::initGui" << std::endl;

   // Creates the action
   m_action = new QAction(QIcon(""), tr("Agile Plugin"), this);
   m_action->setWhatsThis(tr("Launches the agile plugin"));

   // Connects the triggered signal to the slot
   connect(m_action, SIGNAL(triggered()), this, SLOT(run()));

   // Adds the action to the menu
   m_GISInterface->addRasterToolBarIcon(m_action);
   m_GISInterface->addPluginToMenu(tr("&Agile Plugin"), m_action);

   mpMapTool = new QgsMapToolEmitPoint( m_GISInterface->mapCanvas() );

   connect(mpMapTool, SIGNAL(canvasClicked(const QgsPoint &, Qt::MouseButton)), this,SLOT(onClicked(const QgsPoint &, Qt::MouseButton)));
}

void AgilePlugin::onClicked(const QgsPoint &point, Qt::MouseButton button)
{
    double x = point.x();
    double y = point.y();
QgsMessageLog::instance()->logMessage(QString::number(x)+ " " + QString::number(y), "AgilePlugin", QgsMessageLog::INFO);
}

void AgilePlugin::run()
{

    // Ajout de Geotiff
    QString files = QFileDialog::getOpenFileName(nullptr, tr("Ouvrir image Geotiff..."),"/home",tr("Image Files (*.tif *.geotiff)"));
    QFileInfo myRasterFileInfo(files);
    QgsRasterLayer * mypLayer = new QgsRasterLayer(myRasterFileInfo.filePath(),
    myRasterFileInfo.completeBaseName());
    QgsMapLayerRegistry::instance()->addMapLayer(mypLayer, TRUE);
    // ajout GPX
    QString filegpx = QFileDialog::getOpenFileName(nullptr, tr("Ouvrir une trace GPX..."),"/home",tr("Track (*.gpx)"));
    QFileInfo myVectorFileInfo(filegpx);

    QgsVectorLayer * myvLayert = new QgsVectorLayer(myVectorFileInfo.filePath()+"?type=track",myVectorFileInfo.completeBaseName(),"gpx");
    QgsVectorLayer * myvLayerr = new QgsVectorLayer(myVectorFileInfo.filePath()+"?type=route",myVectorFileInfo.completeBaseName(),"gpx");
    QgsVectorLayer * myvLayerw = new QgsVectorLayer(myVectorFileInfo.filePath()+"?type=waypoint",myVectorFileInfo.completeBaseName(),"gpx");
    QgsMapLayerRegistry::instance()->addMapLayer(myvLayert, TRUE);
    QgsMapLayerRegistry::instance()->addMapLayer(myvLayerr, TRUE);
    QgsMapLayerRegistry::instance()->addMapLayer(myvLayerw, TRUE);
    //QgisInterface::addRasterLayer(files,"Image test");

    QgsMessageLog::instance()->logMessage("Agile Plugin launched", "AgilePlugin", QgsMessageLog::INFO);
    std::cout << "test0";

    // Gets the map canvas
    QgsMapCanvas * canvas = m_GISInterface->mapCanvas();
    canvas->setMapTool(mpMapTool);
    // Creates a raster layer

}

void AgilePlugin::unload()
{
    QgsMessageLog::instance()->logMessage("Agile Plugin unloaded", "AgilePlugin", QgsMessageLog::INFO);
}

//////////////////////////////////////////////////////////////////////////
//
//
//  THE FOLLOWING CODE IS AUTOGENERATED BY THE PLUGIN BUILDER SCRIPT
//    YOU WOULD NORMALLY NOT NEED TO MODIFY THIS, AND YOUR PLUGIN
//      MAY NOT WORK PROPERLY IF YOU MODIFY THIS INCORRECTLY
//
//
//////////////////////////////////////////////////////////////////////////

QGISEXTERN QgisPlugin * classFactory(QgisInterface * theQgisInterfacePointer)
{
  return new AgilePlugin(theQgisInterfacePointer);
}

QGISEXTERN QString name()
{
  return sName;
}

QGISEXTERN QString description()
{
  return sDescription;
}

QGISEXTERN QString category()
{
  return sCategory;
}

QGISEXTERN int type()
{
  return sPluginType;
}

QGISEXTERN QString version()
{
  return sPluginVersion;
}

QGISEXTERN QString icon()
{
  return sPluginIcon;
}

QGISEXTERN void unload( QgisPlugin * thePluginPointer )
{
  delete thePluginPointer;
}
