#include "agileplugin.h"
#include "qgisinterface.h"
#include "qgsmessagelog.h"
#include "qgsmapcanvas.h"
#include "qgsrasterlayer.h"
#include "qgsmaplayerregistry.h"
#include <QAction>
#include <QList>
#include <QFileDialog>
#include <QFileInfo>

using namespace std;

// Static variables for plugin description
static const QString sName = QObject::tr("AgilePlugin");
static const QString sDescription = QObject::tr("This is a very agile plugin");
static const QString sCategory = QObject::tr("Agile projects");
static const QString sPluginVersion = QObject::tr("Version 1.0");
static const QgisPlugin::PLUGINTYPE sPluginType = QgisPlugin::UI;
static const QString sPluginIcon = "";

AgilePlugin::AgilePlugin(QgisInterface * interface)
    : QgisPlugin(sName, sDescription, sCategory, sPluginVersion, sPluginType)
    , m_GISInterface(interface)
    , m_action(nullptr)
{
}

void AgilePlugin::initGui()
{
   std::cout << "AgilePlugin::initGui" << std::endl;

   // Creates the action
   m_action = new QAction(QIcon(""), tr("Agile Plugin"), this);
   m_action->setWhatsThis(tr("Launches the agile plugin"));

   // Connects the triggered signal to the slot
   connect(m_action, SIGNAL(triggered()), this, SLOT(run()));

   // Adds the action to the menu
   m_GISInterface->addRasterToolBarIcon(m_action);
   m_GISInterface->addPluginToMenu(tr("&Agile Plugin"), m_action);
}

void AgilePlugin::run()
{

    QString nomFichier;
    QString cheminDuDossier;

    QDir path;

    QString files = QFileDialog::getOpenFileName(nullptr, tr("Ouvrir image Geotiff..."),"/home",tr("Image Files (*.tif *.geotiff)"));
    QFileInfo myRasterFileInfo(files);
    QgsRasterLayer * mypLayer = new QgsRasterLayer(myRasterFileInfo.filePath(),
    myRasterFileInfo.completeBaseName());
    QgsMapLayerRegistry::instance()->addMapLayer(mypLayer, TRUE);

    //QgisInterface::addRasterLayer(files,"Image test");

    QgsMessageLog::instance()->logMessage("Agile Plugin launched", "AgilePlugin", QgsMessageLog::INFO);

    // Gets the map canvas
    QgsMapCanvas * canvas = m_GISInterface->mapCanvas();

    // Creates a raster layer
    QgsRasterLayer * rasterLayer = new QgsRasterLayer("/home/matthieu/Downloads/land_shallow_topo_2048.tif");
    if (rasterLayer->isValid())
    {
        // Registers the layer
        QgsMapLayerRegistry::instance()->addMapLayer(rasterLayer);

        // Setups the canvas
        canvas->setExtent(rasterLayer->extent());
        canvas->enableAntiAliasing(true);
        canvas->setCanvasColor(QColor(255, 255, 255));
        canvas->freeze(false);

        // Adds the layer in the canvas
        QList <QgsMapCanvasLayer> layerSet;
        layerSet.append(QgsMapCanvasLayer(rasterLayer));
        canvas->setLayerSet(layerSet);
        canvas->setVisible(true);
        canvas->refresh();
    }
}

void AgilePlugin::unload()
{
    QgsMessageLog::instance()->logMessage("Agile Plugin unloaded", "AgilePlugin", QgsMessageLog::INFO);
}

//////////////////////////////////////////////////////////////////////////
//
//
//  THE FOLLOWING CODE IS AUTOGENERATED BY THE PLUGIN BUILDER SCRIPT
//    YOU WOULD NORMALLY NOT NEED TO MODIFY THIS, AND YOUR PLUGIN
//      MAY NOT WORK PROPERLY IF YOU MODIFY THIS INCORRECTLY
//
//
//////////////////////////////////////////////////////////////////////////

QGISEXTERN QgisPlugin * classFactory(QgisInterface * theQgisInterfacePointer)
{
  return new AgilePlugin(theQgisInterfacePointer);
}

QGISEXTERN QString name()
{
  return sName;
}

QGISEXTERN QString description()
{
  return sDescription;
}

QGISEXTERN QString category()
{
  return sCategory;
}

QGISEXTERN int type()
{
  return sPluginType;
}

QGISEXTERN QString version()
{
  return sPluginVersion;
}

QGISEXTERN QString icon()
{
  return sPluginIcon;
}

QGISEXTERN void unload( QgisPlugin * thePluginPointer )
{
  delete thePluginPointer;
}
